""" Строковый тип данных - один из самых часто используемых.
 Первый пример последоватеьности в П.
 Обозначается - str. Для присвоения переменной str-объекта,
 нужно записать его справа от переменной после знака равно и
 заключить в кавычки (любые). Открывающие и закрывающие кавычки должны
 быть одинаковыми. Для многострочного текста обычно используются
 тройные кавычки"""

# Строка - неизменямый тип данных

# Преобразование в строку.
# Используется функция str() :
a = 1
b = 1.0
c = [1, 2, 3]
d = (1, 2, 3)
e = {1, 2, 3}
f = {1: 'one', 2: 'two', 3: 'three'}
for i in (a, b, c, d, e, f):
    try:
        print(f"{i} -> {type(i)} {len(i)} -> {str(i)} -> {type(str(i))} {len(str(i))}")
    except TypeError:
        print(f"{i} -> {type(i)} У объекта нет длины -> {str(i)} -> {type(str(i))} {len(str(i))}")
print()

# Также для преобразования в строку может использоваться функция repr()
# и функция format().

a = 'Hello\nworld!'
print(str(a))
print(repr(a))
print(format(a))
print()

# Конкатенация строк
a = 'Anna'
b = 'Anutka'
c = 'Annushka'
print(a + b + c)
print(b + c + a)
# От перестановки мест слагаемых сумма меняется

# Умножение на число
num1 = 3
print(a * num1)
# Используются только int-числа

# Проверка принадлежности осуществляется с помощью
# оператора in отдельно
# или вместе с логическим операторм not

# Индексация строк
'''Каждому символу в строке соответствует порядковый номер, 
по которому к символу можно обратиться - 
индекс.

Нумерация начинается с 0 - 
тогда отсчёт идёт от начала и до конца строки, 
каждый индекс увеличивается на единицу.
Первый индекс 0, последний - len(s) - 1

Нумерация может начинаться с -1 - 
тогда отсчёт идёт с конца строки к началу и 
каждый индекс уменьшается на единицу.
Первый индекс -1, последний - -len(s)

Чтобы обратиться к элементу строки, 
нужно написать имя переменной и в квадратных скобках указать индекс'''

s = 'Homer'
print(s[0])
print(s[-1])

# Итерирование строк
# Итерировать можно как по самой строке, так и с использованием индексов:
for c in s:
    print(c)
print()
for i in range(len(s)):
    print(s[i])

'''С помощью индекса можно делать срезы - выбирать произвольные участки строки, 
ограниченные двумя индексами. Индексы задают диапазон. 
Левый берется включительно, правый - невключительно. 
Запись [ : 3] означает: взять исходную строку от начала до символа с индексом 3 невключительно
Запись [3 : ] означает: взять исходную строку, начиная с символа с индексом 3
включительно, и до конца
Запись [ : ] означает: взять исходную строку без изменений
Запись [::-1] означает: взять исходную строку в обратном порядке
При использовании отрицательных индексов первый параметр среза должен быть 
меньше второго или пропущен
Шаг среза - третий необязательный параметр, который означает: взять символ, 
индекс которого приходится на указанный шаг
В случае, если используется отрицатеьный шаг среза и отрицательные индексы, то
сначала указывается больший параметр, а затем меньший'''

a = 'abcdefghij'
b = a[-1 : -5 : -1]
print(b)
c = a[-5 : -1]
print(c)

# Функции строк: min(), max(), len()

# Методы строк
# s.capitalize() - возвращает копию строки, где первый символ будет большм, остальные маленькими
# s.swapcase() - возвращает копию строки, где регистр символов заменится на противоположный
# s.title() - копия строки, где первый символ каждого слова будет с большой буквы, остальные - маленькими
# s.lower() - копия строки, где все символы в нижнем регистре
# s.upper() - копия строки, где все символы в верхнем регистре

# Для изменения регистра исходной строки: s = s.upper()

# s.count(подстрока, начало, конец) - количество непересекающихся вхождений подстроки в строку s.
# s.startswith(подстрока, начало, конец) - проверяет, начинается ли строка с подстроки, возвращает True или False
# s.endswith(подстрока, начало, конец) - то же самое, только проверяет заканчивается ли
# s.find(подстрока, начало, конец) - находит индекс первого вхождния подстроки в строку, а в случае отсутсвия возвращает -1.
# s.rfind(подстрока, начало, конец) - ищет последнее вхождение индекса с начала строки
# s.index(подстрока, начало, конец) - то же самое, но в случае отсутствия возвращает ошибку ValueError
# s.rindex(подстрока, начало, конец) - ищет с конца
# s.strip() - возвращает копию строки, у которой удалены все пробелы до и после
# s.lstrip() - удалены пробелы слева
# s.rstrip() - удалены пробелы справа. Все strip имеют необязательный аргумент chars - определяет удаляемый символ по умолчанию он равен пробелу.
# s.replace(old, new) - возвращает копию строки, где все вохждения подстроки old заменены на new

# Необязательные аргументы НАЧАЛО и КОНЕЦ определяют границы поиса в исходной строке
s = 'I learn Python language. Python - awesome!'
print(s.find('Python'))
s = 'колобок'
print(s.find('к'))
print(s.rfind('к'))

# s.isalnum() - определяет, состоит ли исходная строка только из буквенно-цифровых символов. Возвращает True или False
# s.isalpha() - определяет, состоит ли только из буквенных символов
# s.isdigit() - только ли из цифр
# s.islower() - все ли буквы в нижнем регистре
# s.isupper() - все ли буквы в верхнем регистре
# s.isspace() - вся ли строка состоит из пробельных символов

# Форматирование и f-строки

age = 27
name = 'Timur'
profession = 'math teacher'
txt = 'My name is {0}, I am {1}, I work as a {2}'.format(name, age, profession)
print(txt)
name = 'Timur'
txt = 'My name is {0}-{0}-{0}'.format(name)
print(txt)
first_name = 'Timur'
last_name = 'Guev'
age = 27
profession = 'math teacher'
affiliation = 'BeeGeek'
print(f'Hello, {first_name} {last_name}. You are {age}. You are a {profession}. You were a member of {affiliation}')

# При работе со строками можно пользоваться фнкциями min() и max():
# они будут сравнивать значение ord() и выбирать большее или меньшее







